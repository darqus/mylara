# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    env:
      TZ: Europe/Moscow
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      - name: Install dependencies
        run: npm install
      - name: Update environment
        run: npm run update-env
      - name: Build
        run: npm run build
        env:
          VITE_ROUTER_BASE: /
          VITE_APP_BASE: /
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Copy CNAME, 404.html and .nojekyll to build directory
        run: |
          cp CNAME dist/spa/ || echo "CNAME file not found"
          cp public/404.html dist/spa/ || echo "404.html file not found"
          cp .nojekyll dist/spa/ || echo ".nojekyll file not found"
          cp _config.yml dist/spa/ || echo "_config.yml file not found"
          cp public/.htaccess dist/spa/ || echo ".htaccess file not found"
          cp public/mime.types dist/spa/ || echo "mime.types file not found"
          cp -r _includes dist/spa/ || echo "_includes directory not found"
      - name: Fix JavaScript file extensions and MIME types
        run: |
          # Ensure all JS files have correct extensions
          find dist/spa/assets -name "*.js" -type f | while read file; do
            if [[ ! "$file" =~ \.js$ ]]; then
              mv "$file" "$file.js"
            fi
          done
          # List all JS files for verification
          echo "JavaScript files in build:"
          find dist/spa/assets -name "*.js" -type f
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload build output directory
          path: './dist/spa'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
